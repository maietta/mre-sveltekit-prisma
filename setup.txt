The following steps were taken to set this project up:

Create project:
bun create svelte@latest
    (Choose ESLint, Prettier, Experimental Svelte 5 support)

Switch the adaptor:
bun add -d svelte-adapter-bun
    (Modify the svelte.config.js to refernce the svelte-adapter-bun)

Add Prisma CLI & Client
bun add -D prisma
bun prisma init

Run the SQL create script found in sql/ to create some sample tables.

Introspect the database to create a local Prisma schema.
bun prisma db pull

(Side note: For the purposes of this demo, we will not be baselining the database, but this would be an important step in production.)

Now we are ready for setting up our application.

Add the Prisma Client dependency and generate the local client interface, which by default is included in node_modules/
bun add @prisma/client

Generate the client interface, which will be by default, located in node_modules/, a directory that is not included in our commits.

bun prisma generate

NOTE: This is where we begin to see a problem? This might have been fixed, but we're about to find out. Running the generate command appears to work.

With all the prerequisites out of the way, let's wire up the database to the app and display something out of the database.

After dropping in the Dockerfile and attempting to build, we get hit with the following:

PrismaClientInitializationError: Prisma Client could not locate the Query Engine for runtime "debian-openssl-1.1.x".
2.462 
2.462 This happened because Prisma Client was generated for "rhel-openssl-3.0.x", but the actual deployment required "debian-openssl-1.1.x".
2.462 Add "debian-openssl-1.1.x" to `binaryTargets` in the "schema.prisma" file and run `prisma generate` after saving it:
2.462 
2.462 generator client {
2.462   provider      = "prisma-client-js"
2.462   binaryTargets = ["native", "debian-openssl-1.1.x"]
2.462 }

Let's fix that by updating the prisma.schema and re-running the generate client command.

That did not fix the problem, but now we are starting to reproduce the issues I expierenced.

See logs/ for the various log outputs after each fix attempt.

log2-after-installing-nodejs.txt details what happens when we go ahead and update our Dockerfile to include nodejs. Note that building the docker image locally no longer is successful because now we generate an error. I believe this error might be a big clue as to what is happening.

Let's now try and generate our client outside the node_modules/ and in our project instead, but I think this is a moot point, since we now have errors that seem to point to the problem.

Now that we've got our Prisma.schema with the following:

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
  output        = "../src/lib/server/prisma/client"
},

We need to run `bun prisma generate` once again, which will build a new client in our src/lib/server/prisma/client directory. Adjust the local reference in src/lib/prisma.ts.

Afer this, we now have a log3. "Error when evaluating SSR module /src/lib/server/prisma/client/index-browser.js: - ReferenceError: exports is not defined"

Okay, now I'm getting stumped.

Next, I try and update Dockerfile to use `npx prisma generate` instead of `bun prisma generate`. This results in same problem. This is not our issue.
